################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from . import utils
from . import destructors
libzperfmq_destructors = destructors.lib

class Zperf(object):
    """
    API to the zperfmq perf actor.
    """

    def __init__(self, socket_type):
        """
        Create a new zperf using the given socket type.
        """
        p = utils.lib.zperf_new(socket_type)
        if p == utils.ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = utils.ffi.gc(p, libzperfmq_destructors.zperf_destroy_py)

    def set_batch(self, size):
        """
        Set the batch buffer (in and out) size in bytes.  Must call this
        prior to bind or connect.  This setting is experimental and not
        something app code normally should ever do.  Return 0 if okay.
        """
        return utils.lib.zperf_set_batch(self._p, size)

    def bind(self, address):
        """
        Bind the zperf measurement socket to an address.
        Return the qualified address or NULL on error.
        """
        return utils.lib.zperf_bind(self._p, utils.to_bytes(address))

    def connect(self, address):
        """
        Connect the zperf measurement socket to a fully qualified address.
        Return code is zero on success.
        """
        return utils.lib.zperf_connect(self._p, utils.to_bytes(address))

    def measure(self, name, nmsgs, msgsize):
        """
        Perform a measurement atomically.  This is simply the combination
        of initialize() and finalize().
        """
        return utils.lib.zperf_measure(self._p, utils.to_bytes(name), nmsgs, msgsize)

    def initiate(self, name, nmsgs, msgsize):
        """
        Initiate a measurement.
        """
        utils.lib.zperf_initiate(self._p, utils.to_bytes(name), nmsgs, msgsize)

    def finalize(self):
        """
        Wait for the previously initiated a measurement.
        """
        return utils.lib.zperf_finalize(self._p)

    def name(self):
        """
        Return the name of the last measurement.
        """
        return utils.lib.zperf_name(self._p)

    def nmsgs(self):
        """
        The requested number of message for last measurement.
        """
        return utils.lib.zperf_nmsgs(self._p)

    def msgsize(self):
        """
        The requested size of message for last measurement.
        """
        return utils.lib.zperf_msgsize(self._p)

    def noos(self):
        """
        Return the number of messages that were received out of sync
        during the previous yodel or recv measurements.  The measurement
        must be finalized.
        """
        return utils.lib.zperf_noos(self._p)

    def bytes(self):
        """
        Return the number of bytes transferred by the previous
        measurement.  The measurement must be finalized.
        """
        return utils.lib.zperf_bytes(self._p)

    def cpu(self):
        """
        Return the CPU time (user+system) in microseconds used by the last
        measurement.  The measurement must be finalized.
        """
        return utils.lib.zperf_cpu(self._p)

    def time(self):
        """
        Return the elapsed time in microseconds used by the last
        measurement.  The measurement must be finalized.
        """
        return utils.lib.zperf_time(self._p)

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        utils.lib.zperf_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
