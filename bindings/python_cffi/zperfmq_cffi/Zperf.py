################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from . import utils
from . import destructors
libzperfmq_destructors = destructors.lib

class Zperf(object):
    """
    API to the zperfmq perf actor.
    """

    def __init__(self, socket_type):
        """
        Create a new zperf using the given socket type.
        """
        p = utils.lib.zperf_new(socket_type)
        if p == utils.ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = utils.ffi.gc(p, libzperfmq_destructors.zperf_destroy_py)

    def bind(self, address):
        """
        Bind the zperf measurement socket to an address.
        Return the qualified address or NULL on error.
        """
        return utils.lib.zperf_bind(self._p, utils.to_bytes(address))

    def connect(self, address):
        """
        Connect the zperf measurement socket to a fully qualified address.
        Return code is zero on success.
        """
        return utils.lib.zperf_connect(self._p, utils.to_bytes(address))

    def echo(self, nmsgs):
        """
        Perform an echo measurement, expecting a given number of
        messages. Return elapsed operation time in microseconds.
        """
        return utils.lib.zperf_echo(self._p, nmsgs)

    def echo_ini(self, nmsgs):
        """
        Initiate an echo measurement, expecting a given number of
        messages.
        """
        utils.lib.zperf_echo_ini(self._p, nmsgs)

    def echo_fin(self):
        """
        Finalize a previously initiated echo measurement, return elapsed
        operation time in microseconds.
        """
        return utils.lib.zperf_echo_fin(self._p)

    def yodel(self, nmsgs, msgsize):
        """
        Perform a yodel measurement which sends the given number of
        messages of given size to an echo service.  Return elapsed
        operation time in microseconds.
        """
        return utils.lib.zperf_yodel(self._p, nmsgs, msgsize)

    def yodel_ini(self, nmsgs, msgsize):
        """
        Initiate a yodel measurement which sends the given number of
        messages of given size to an echo service.
        """
        utils.lib.zperf_yodel_ini(self._p, nmsgs, msgsize)

    def yodel_fin(self):
        """
        Finalize a previously initialized yodel measurement, return
        elapsed operation time in microseconds.
        """
        return utils.lib.zperf_yodel_fin(self._p)

    def send(self, nmsgs, msgsize):
        """
        Perform a send measurement sending the given number of message of
        given size to a receiver.  Return elapsed operation time in
        microseconds.
        """
        return utils.lib.zperf_send(self._p, nmsgs, msgsize)

    def send_ini(self, nmsgs, msgsize):
        """
        Initialize a send measurement sending the given number of message
        of given size to a receiver.
        """
        utils.lib.zperf_send_ini(self._p, nmsgs, msgsize)

    def send_fin(self):
        """
        Finalize a previously initialized send measurement.  Return
        elapsed operation time in microseconds.
        """
        return utils.lib.zperf_send_fin(self._p)

    def recv(self, nmsgs):
        """
        Perform a recv measurement recving the given number of messages.
        Return elapsed operation time in microseconds.
        """
        return utils.lib.zperf_recv(self._p, nmsgs)

    def recv_ini(self, nmsgs):
        """
        Initialize a recv measurement.
        """
        utils.lib.zperf_recv_ini(self._p, nmsgs)

    def recv_fin(self):
        """
        Finalize a previously initialized recv measurement.  Return
        elapsed operation time in microseconds.
        """
        return utils.lib.zperf_recv_fin(self._p)

    def noos(self):
        """
        Return the number of messages that were received out of sync
        during the previous yodel or recv measurements.  The measurement
        must be finalized.
        """
        return utils.lib.zperf_noos(self._p)

    def bytes(self):
        """
        Return the number of bytes transferred by the previous
        measurement.  The measurement must be finalized.
        """
        return utils.lib.zperf_bytes(self._p)

    def cpu(self):
        """
        Return the CPU time (user+system) in microseconds used by the last
        measurement.  The measurement must be finalized.
        """
        return utils.lib.zperf_cpu(self._p)

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        utils.lib.zperf_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
