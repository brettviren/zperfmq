/*  =========================================================================
    zperf - API to the zperfmq perf actor.

    LGPL 3.0
    =========================================================================
*/

#ifndef ZPERF_H_INCLUDED
#define ZPERF_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zperf.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef ZPERFMQ_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a new zperf using the given socket type.
ZPERFMQ_EXPORT zperf_t *
    zperf_new (int socket_type);

//  *** Draft method, for development use, may change without warning ***
//  Destroy the zperf.
ZPERFMQ_EXPORT void
    zperf_destroy (zperf_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Bind the zperf measurement socket to an address.
//  Return the qualified address or NULL on error.
ZPERFMQ_EXPORT const char *
    zperf_bind (zperf_t *self, const char *address);

//  *** Draft method, for development use, may change without warning ***
//  Connect the zperf measurement socket to a fully qualified address.
//  Return code is zero on success.
ZPERFMQ_EXPORT int
    zperf_connect (zperf_t *self, const char *address);

//  *** Draft method, for development use, may change without warning ***
//  Perform an echo measurement, expecting a given number of
//  messages. Return elapsed operation time in microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_echo (zperf_t *self, int nmsgs);

//  *** Draft method, for development use, may change without warning ***
//  Initiate an echo measurement, expecting a given number of
//  messages.
ZPERFMQ_EXPORT void
    zperf_echo_ini (zperf_t *self, int nmsgs);

//  *** Draft method, for development use, may change without warning ***
//  Finalize a previously initiated echo measurement, return elapsed
//  operation time in microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_echo_fin (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Perform a yodel measurement which sends the given number of
//  messages of given size to an echo service.  Return elapsed
//  operation time in microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_yodel (zperf_t *self, int nmsgs, uint64_t msgsize);

//  *** Draft method, for development use, may change without warning ***
//  Initiate a yodel measurement which sends the given number of
//  messages of given size to an echo service.
ZPERFMQ_EXPORT void
    zperf_yodel_ini (zperf_t *self, int nmsgs, uint64_t msgsize);

//  *** Draft method, for development use, may change without warning ***
//  Finalize a previously initialized yodel measurement, return
//  elapsed operation time in microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_yodel_fin (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Perform a send measurement sending the given number of message of
//  given size to a receiver.  Return elapsed operation time in
//  microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_send (zperf_t *self, int nmsgs, uint64_t msgsize);

//  *** Draft method, for development use, may change without warning ***
//  Initialize a send measurement sending the given number of message
//  of given size to a receiver.
ZPERFMQ_EXPORT void
    zperf_send_ini (zperf_t *self, int nmsgs, uint64_t msgsize);

//  *** Draft method, for development use, may change without warning ***
//  Finalize a previously initialized send measurement.  Return
//  elapsed operation time in microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_send_fin (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Perform a recv measurement recving the given number of messages.
//  Return elapsed operation time in microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_recv (zperf_t *self, int nmsgs);

//  *** Draft method, for development use, may change without warning ***
//  Initialize a recv measurement.
ZPERFMQ_EXPORT void
    zperf_recv_ini (zperf_t *self, int nmsgs);

//  *** Draft method, for development use, may change without warning ***
//  Finalize a previously initialized recv measurement.  Return
//  elapsed operation time in microseconds.
ZPERFMQ_EXPORT uint64_t
    zperf_recv_fin (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the number of messages that were received out of sync
//  during the previous yodel or recv measurements.  The measurement
//  must be finalized.
ZPERFMQ_EXPORT int
    zperf_noos (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the number of bytes transferred by the previous
//  measurement.  The measurement must be finalized.
ZPERFMQ_EXPORT uint64_t
    zperf_bytes (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the CPU time (user+system) in microseconds used by the last
//  measurement.  The measurement must be finalized.
ZPERFMQ_EXPORT uint64_t
    zperf_cpu (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
ZPERFMQ_EXPORT void
    zperf_test (bool verbose);

#endif // ZPERFMQ_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
