/*  =========================================================================
    zperf - API to the zperfmq perf actor.

    LGPL 3.0
    =========================================================================
*/

#ifndef ZPERF_H_INCLUDED
#define ZPERF_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/zperf.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef ZPERFMQ_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a new zperf using the given socket type.
ZPERFMQ_EXPORT zperf_t *
    zperf_new (int socket_type);

//  *** Draft method, for development use, may change without warning ***
//  Destroy the zperf.
ZPERFMQ_EXPORT void
    zperf_destroy (zperf_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Set the batch buffer (in and out) size in bytes.  Must call this
//  prior to bind or connect.  This setting is experimental and not
//  something app code normally should ever do.  Return 0 if okay.
ZPERFMQ_EXPORT int
    zperf_set_batch (zperf_t *self, uint32_t size);

//  *** Draft method, for development use, may change without warning ***
//  Bind the zperf measurement socket to an address.
//  Return the qualified address or NULL on error.
ZPERFMQ_EXPORT const char *
    zperf_bind (zperf_t *self, const char *address);

//  *** Draft method, for development use, may change without warning ***
//  Connect the zperf measurement socket to a fully qualified address.
//  Return code is zero on success.
ZPERFMQ_EXPORT int
    zperf_connect (zperf_t *self, const char *address);

//  *** Draft method, for development use, may change without warning ***
//  Perform a measurement atomically.  This is simply the combination
//  of initialize() and finalize().
ZPERFMQ_EXPORT uint64_t
    zperf_measure (zperf_t *self, const char *name, int nmsgs, uint64_t msgsize);

//  *** Draft method, for development use, may change without warning ***
//  Initiate a measurement.
ZPERFMQ_EXPORT void
    zperf_initiate (zperf_t *self, const char *name, int nmsgs, uint64_t msgsize);

//  *** Draft method, for development use, may change without warning ***
//  Wait for the previously initiated a measurement.
ZPERFMQ_EXPORT uint64_t
    zperf_finalize (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the name of the last measurement.
ZPERFMQ_EXPORT const char *
    zperf_name (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  The requested number of message for last measurement.
ZPERFMQ_EXPORT int
    zperf_nmsgs (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  The requested size of message for last measurement.
ZPERFMQ_EXPORT uint64_t
    zperf_msgsize (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the number of messages that were received out of sync
//  during the previous yodel or recv measurements.  The measurement
//  must be finalized.
ZPERFMQ_EXPORT int
    zperf_noos (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the number of bytes transferred by the previous
//  measurement.  The measurement must be finalized.
ZPERFMQ_EXPORT uint64_t
    zperf_bytes (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the CPU time (user+system) in microseconds used by the last
//  measurement.  The measurement must be finalized.
ZPERFMQ_EXPORT uint64_t
    zperf_cpu (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return the elapsed time in microseconds used by the last
//  measurement.  The measurement must be finalized.
ZPERFMQ_EXPORT uint64_t
    zperf_time (zperf_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
ZPERFMQ_EXPORT void
    zperf_test (bool verbose);

#endif // ZPERFMQ_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
