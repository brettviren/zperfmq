The following ABNF grammar defines the The Zperf Protocol:

    zperf = hello *( create | lookup | socket | measure | heartbeat ) [ goodbye ]
    hello   = C:HELLO   ( S:HELLO-OK   / S:INVALID / S:FAILED )
    create  = C:CREATE  ( S:PERF-OK  / S:INVALID / S:FAILED )
    lookup  = C:LOOKUP  ( S:PERF-OK  / S:INVALID / S:FAILED )
    socket  = C:SOCKET  ( S:SOCKET-OK  / S:INVALID / S:FAILED )
    measure = C:MEASURE ( S:RESULT     / S:INVALID / S:FAILED )
    heartbeat = C:PING S:PING-OK
    goodbye = C:GOODBYE ( S:GOODBYE-OK / S:INVALID / S:FAILED )

    ;  Create a perf on the server associated with the client.

    HELLO           = signature %d1 nickname
    signature       = %xAA %xA0             ; two octets
    nickname        = string                ; Client nickname

    ;  Create a perf on the server associated with the client.

    HELLO-OK        = signature %d2 nickname
    nickname        = string                ; Client nickname

    ;  No description

    CREATE          = signature %d3 stype
    stype           = number-4              ; Socket type

    ;  No description

    LOOKUP          = signature %d4 ident
    ident           = number-8              ; ID for the perf instance

    ;  No description

    PERF-OK         = signature %d5 ident stype endpoints
    ident           = number-8              ; ID for the perf instance
    stype           = number-4              ; Socket type
    endpoints       = list of string        ; Socket endpoints

    ;  Bind or connect the measurement socket to the address.

    SOCKET          = signature %d6 ident action endpoint
    ident           = number-8              ; ID for the perf instance
    action          = string                ; Bind or Connect
    endpoint        = string                ; Address

    ;  Bind or connect the measurement socket to the address.

    SOCKET-OK       = signature %d7 ident action endpoint
    ident           = number-8              ; ID for the perf instance
    action          = string                ; Bind or Connect
    endpoint        = string                ; Address

    ;  Initiate a measurement.

    MEASURE         = signature %d8 ident measure nmsgs msgsize timeout
    ident           = number-8              ; ID for the perf instance
    measure         = string                ; Measurement type
    nmsgs           = number-4              ; Number of messages
    msgsize         = number-8              ; Message size in bytes
    timeout         = number-4              ; Timeout in msec

    ;  The results of a measurement.

    RESULT          = signature %d9 ident measure nmsgs msgsize timeout time_us cpu_us noos nbytes
    ident           = number-8              ; ID for the perf instance
    measure         = string                ; Measurement type
    nmsgs           = number-4              ; Number of messages
    msgsize         = number-8              ; Message size in bytes
    timeout         = number-4              ; Timeout in millisec
    time_us         = number-8              ; Time elapsed in microseconds
    cpu_us          = number-8              ; CPU time used (user+system) in microseconds
    noos            = number-4              ; Number of out-of-order messages
    nbytes          = number-8              ; Number of bytes processed

    ;  Client pings the server. Server replies with PING-OK, or ERROR with
    ;  status COMMAND-INVALID if the client is not recognized (e.g. after a
    ;  server restart or network recovery).

    PING            = signature %d10

    ;  Server replies to a client ping.

    PING-OK         = signature %d11

    ;  Close the connection politely

    GOODBYE         = signature %d12

    ;  Handshake a connection close

    GOODBYE-OK      = signature %d13

    ;  Command failed for some specific reason

    ERROR           = signature %d14 status reason
    status          = number-2              ; 3-digit status code
    reason          = string                ; Printable explanation

    ; Strings are always length + text contents
    string          = number-1 *VCHAR

    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-2        = 2OCTET
    number-4        = 4OCTET
    number-8        = 8OCTET
