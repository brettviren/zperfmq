<class
    name = "zperf_client"
    title = "Zperf Client"
    script = "zproto_client_c" 
    protocol_class = "zperf_msg"
    package_dir = "../include"
    project_header = "zperfmq_classes.hpp"
    header_ext = "hpp"
    source_ext = "cpp"
    >
  This is a Zperf client.  It can be used to request a perf
  measurement from the Zperf server.

  <include filename = "../license.xml" />

  <state name = "start">
    <event name = "connect" next = "expect hello ok">
      <action name = "connect to server endpoint" />
      <action name = "set nickname" />
      <action name = "use connect timeout" />
      <action name = "send" message = "HELLO" />
    </event>
    <event name = "bad endpoint">
      <action name = "signal bad endpoint" />
      <action name = "terminate" />
    </event>
  </state>

  <state name = "expect hello ok" inherit = "defaults">
    <event name = "HELLO OK" next = "connected">
      <action name = "signal connected" />
      <action name = "client is connected" />
    </event>
  </state>


  <state name = "connected" inherit = "defaults">

    <event name = "create perf">
      <action name = "set perf attributes" />
      <action name = "send" message = "CREATE" />
    </event>
    <event name = "ask lookup">
      <action name = "set perf ident" />
      <action name = "send" message = "LOOKUP" />
    </event>
    <event name = "PERF OK" next = "have perf">
      <action name = "remember perf" />
      <action name = "signal got perf" />
    </event>

    <event name = "ask info">
      <action name = "set info request" />
      <action name = "send" message = "INFO" />
    </event>
    <event name = "INFO OK">
      <action name = "remember info" />
      <action name = "signal got info" />
    </event>

  </state>


  <state name = "have perf" inherit = "connected">

    <event name = "set socket">
      <action name = "set socket request" />
      <action name = "send" message = "SOCKET" />
    </event>
    <event name = "SOCKET OK">
      <action name = "set socket request" />
      <action name = "signal socket request" />
    </event>

    <event name = "set measurement">
      <action name = "set measurement request" />
      <action name = "send" message = "MEASURE" />
    </event>
    <event name = "RESULT">
      <action name = "set results" />
      <action name = "signal results" />
    </event>

  </state>


  <state name = "defaults">
    <event name = "destructor">
      <action name = "send" message = "GOODBYE" />
    </event>
    <event name = "GOODBYE OK">
      <action name = "signal success" />
      <action name = "terminate" />
    </event>
    <event name = "expired">
      <action name = "check if connection is dead" />
      <action name = "send" message = "PING" />
    </event>
    <event name = "PING OK">
      <action name = "client is connected" />
    </event>
    <event name = "ERROR" >
      <action name = "check status code" />
      <action name = "terminate" />
    </event>
    <event name = "exception">
      <!-- Generic exception event to interrupt actions -->
    </event>
    <event name = "*">
      <action name = "signal internal error" />
      <action name = "terminate" />
    </event>
  </state>



  <!-- API methods -->

  <method name = "create perf" return = "status">
    Request a perf to be created.  Returned perf ident is needed for
    any subsequent set_socket or set_measurement method calls .

    <field name = "mtype" type = "string">Measurement type</field>
    <field name = "stype" type = "string">Socket type</field>

    <accept reply = "SUCCESS" />
    <accept reply = "FAILURE" />
  </method>

  <method name = "set socket" return = "status">
    Request that a measurement socket be opened on the given endpoint
    where action is bind or connect.  The ident comes from a
    create_perf() call.

    <field name = "ident"    type = "string">ID for the perf instance</field>
    <field name = "action" type = "string" >The socket action (bind or connect)</field>
    <field name = "endpoint" type = "string" >The endpoint address in ZeroMQ format</field>

    <accept reply = "SUCCESS" />
    <accept reply = "FAILURE" />
  </method>

  <method name = "set measurement" return = "status">
    Set a measurement to be performed.  The ident comes from a
    create_perf() call.  Calling this before successfully setting a
    socket is pointless.

    <field name = "ident"    type = "string">ID for the perf instance</field>
    <field name = "nmsgs" type = "number" size = "4" >Number of messages to process</field>
    <field name = "msgsize" type = "number" size = "8" >Size of messages to process</field>
    <field name = "timeout" type = "number" size = "4" >Timeout in msec after no activity</field>
    <accept reply = "SUCCESS" />
    <accept reply = "FAILURE" />
  </method>

  <reply name = "RESULT">
    <field name = "ident"    type = "string">ID for the perf instance</field>
    <field name = "nmsgs" type = "number" size = "4">Number of messages</field>
    <field name = "msgsize" type = "number" size = "8">Message size in bytes</field>
    <field name = "timeout" type = "number" size = "4">Timeout in millisec</field>
    <field name = "time_us" type = "number" size = "8">Time elapsed in microseconds</field>
    <field name = "cpu_us" type = "number" size = "8">CPU time used (user+system) in microseconds</field>
    <field name = "noos" type = "number" size = "4">Number of out-of-order messages</field>
    <field name = "nbytes" type = "number" size = "8">Number of bytes processed</field>
    <accept reply = "SUCCESS" />
    <accept reply = "FAILURE" />
  </reply>

  <reply name = "SUCCESS">
    <field name = "status" type = "integer" />
  </reply>

  <reply name = "FAILURE">
    <field name = "status" type = "integer" />
    <field name = "reason" type = "string" />
  </reply>

</class>
  
