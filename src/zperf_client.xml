<class
    name = "zperf_client"
    title = "Zperf Client"
    script = "zproto_client_c" 
    protocol_class = "zperf_msg"
    package_dir = "../include"
    project_header = "zperfmq_classes.hpp"
    header_ext = "hpp"
    source_ext = "cpp"
    >
  This is a Zperf client.  It can be used to request a perf
  measurement from the Zperf server.

  <include filename = "../license.xml" />

  <state name = "start">
    <event name = "say hello" next = "expect hello ok">
      <action name = "set nickname" />
      <action name = "use connect timeout" />
      <action name = "connect to server" />
      <action name = "send" message = "HELLO" />
    </event>
    <event name = "bad endpoint">
      <action name = "signal bad endpoint" />
      <action name = "terminate" />
    </event>
  </state>

  <state name = "expect hello ok" inherit = "defaults">
    <event name = "HELLO OK" next = "connected">
      <action name = "signal connected" />
      <action name = "client is connected" />
    </event>
  </state>


  <state name = "connected" inherit = "defaults">

    <event name = "create perf">
      <action name = "set perf stype" />
      <action name = "send" message = "CREATE" />
    </event>
    <event name = "request lookup">
      <action name = "set perf ident" />
      <action name = "send" message = "LOOKUP" />
    </event>
    <event name = "PERF OK" next = "have perf">
      <action name = "remember perf" />
      <action name = "signal got perf" />
    </event>

    <event name = "request info">
      <action name = "set info request" />
      <action name = "send" message = "INFO" />
    </event>
    <event name = "INFO OK">
      <action name = "remember info" />
      <action name = "msg info to caller" />
    </event>

  </state>


  <state name = "have perf" inherit = "connected">

    <event name = "request borc">
      <action name = "set ident" />
      <action name = "set socket request" />
      <action name = "send" message = "SOCKET" />
    </event>
    <event name = "SOCKET OK">
      <action name = "signal socket request" />
    </event>

    <!-- 
    <event name = "request measure">
      <action name = "set ident" />
      <action name = "set measurement request" />
      <action name = "send" message = "MEASURE" />
    </event>
    -->
    <event name = "RESULT">
      <action name = "signal result" />
    </event>

    <event name = "launch measure">
      <action name = "set ident" />
      <action name = "set measurement request" />
      <action name = "send" message = "MEASURE" />
      <action name = "signal success" />
    </event>
  </state>


  <state name = "defaults">
    <event name = "destructor">
      <action name = "send" message = "GOODBYE" />
    </event>
    <event name = "GOODBYE OK">
      <action name = "signal success" />
      <action name = "terminate" />
    </event>
    <event name = "expired">
      <action name = "check if connection is dead" />
      <action name = "send" message = "PING" />
    </event>
    <event name = "PING OK">
      <action name = "client is connected" />
    </event>
    <event name = "ERROR" next = "have error" >
      <action name = "check status code" />
    </event>
    <event name = "exception">
      <!-- Generic exception event to interrupt actions -->
    </event>
    <event name = "*">
      <action name = "signal internal error" />
      <action name = "terminate" />
    </event>
  </state>

  <state name = "have error">
    <event name = "command invalid" next = "reconnecting">
      <action name = "use connect timeout" />
      <action name = "send" message = "HELLO" />
    </event>
    <event name = "other">
      <action name = "signal unhandled error" />
      <action name = "terminate" />
    </event>
  </state>
  
  <state name = "reconnecting" inherit = "defaults">
    <event name = "HELLO OK" next = "connected">
      <action name = "client is connected" />
    </event>
  </state>

  <state name = "expect goodbye ok" inherit = "defaults">
    <event name = "GOODBYE OK">
      <action name = "signal success" />
      <action name = "terminate" />
    </event>
    <event name = "*">
      <!-- Ignore anything else the server may send us -->
    </event>
  </state>


  <!-- API methods.  Their names MUST match an event! -->
  <method name = "say hello" return = "status">
    Connect to and say hello to server at endpoint, providing our nickname.
    <field name = "nickname" type = "string" />
    <field name = "endpoint" type = "string" />
    <accept reply = "CONNECTED" />
    <accept reply = "FAILURE" />
  </method>

  <method name = "create perf" return = "status">
    Request a perf to be created with a given socket type.

    This is a synchronous call as the client will wait for
    confirmation.  No return is sent through the command pipe.

    If successful, zperf_client_ident() can be used to retrieve the
    perf ident.  This ident is required for subsequent calls.

    <field name = "stype" type = "number" size = "4">Socket type</field>

    <accept reply = "PERF IDENT" />
    <accept reply = "FAILURE" />
  </method>

  <reply name = "PERF IDENT">
    <field name = "ident" type = "string" />
  </reply>

  <method name = "request borc" return = "status">
    Request that a measurement socket be attached to an endpoint.

    The attachment is either "bind" or "connect" (borc).  The ident
    comes from a create_perf() call.  A "connect" may be repeated on
    the same endpoint and a "bind" may have a wild card for the port.

    This is a synchronous call.  No return is sent through the command
    pipe.

    The endpoint is available after a successful completion.

    <field name = "ident"    type = "string">ID for the perf instance</field>
    <field name = "borc"     type = "string" >The socket attachment type ("bind" or "connect")</field>
    <field name = "endpoint" type = "string" >The endpoint address in ZeroMQ format</field>

    <accept reply = "PERF ENDPOINT" />
    <accept reply = "FAILURE" />
  </method>
  <reply name = "PERF ENDPOINT">
    <field name = "endpoint" type = "string" />
  </reply>

  <!-- 
  <method name = "request measure" return = "status">
    Request a perf measure.

    This is a synchronous call.  The fields in RESULT will be
    available on success.

    <field name = "ident"   type = "string">ID for the perf instance</field>
    <field name = "measure" type = "string">Measure type (echo, yodel, send, recv)</field>
    <field name = "nmsgs"   type = "number" size = "4" >Number of messages to process</field>
    <field name = "msgsize" type = "number" size = "8" >Size of messages to process</field>
    <field name = "timeout" type = "number" size = "4" >Timeout in msec after no activity</field>
    <accept reply = "RESULT" />
    <accept reply = "FAILURE" />
  </method>
  -->

  <method name = "launch measure" return = "status">
    Request a perf measure.

    This is an asynchronous call.  A message matching the fields in
    RESULT will be provided by the command pipe when a successful
    measure is returned.

    <field name = "ident"    type = "string">ID for the perf instance</field>
    <field name = "measure" type = "string">Measure type (echo, yodel, send, recv)</field>
    <field name = "nmsgs" type = "number" size = "4" >Number of messages to process</field>
    <field name = "msgsize" type = "number" size = "8" >Size of messages to process</field>
    <field name = "timeout" type = "number" size = "4" >Timeout in msec after no activity</field>
    <accept reply = "SUCCESS" />
    <accept reply = "FAILURE" />
  </method>

  <reply name = "RESULT">
    <field name = "ident"   type = "string">ID for the perf instance</field>
    <field name = "nmsgs"   type = "number" size = "4">Number of messages</field>
    <field name = "msgsize" type = "number" size = "8">Message size in bytes</field>
    <field name = "timeout" type = "number" size = "4">Timeout in millisec</field>
    <field name = "time_us" type = "number" size = "8">Time elapsed in microseconds</field>
    <field name = "cpu_us"  type = "number" size = "8">CPU time used (user+system) in microseconds</field>
    <field name = "noos"    type = "number" size = "4">Number of out-of-order messages</field>
    <field name = "nbytes"  type = "number" size = "8">Number of bytes processed</field>
    <accept reply = "SUCCESS" />
    <accept reply = "FAILURE" />
  </reply>
  <reply name = "SUCCESS">
    <field name = "status" type = "integer" />
  </reply>

  <reply name = "FAILURE">
    <field name = "status" type = "integer" />
    <field name = "reason" type = "string" />
  </reply>

</class>
  
