.template 0

global.codec ?= xml.load_file (class.codec_file)
global.server ?= xml.load_file (class.server_file)
global.client ?= xml.load_file (class.client_file)

                               
function dot_state(state)
  s_name = "s_$(name:c)"
  >  $(s_name) [shape = "doublecircle", label="$(name)"];
endfunction

function dot_state_inheritance(state)
  if defined(state.inherit)
    >  s_$(name:c) -> "s_$(state.inherit:c)" [style="dashed", arrowhead="onormal"];
  endif
endfunction

function dot_event(event)
  >  e_$(state.name:c)_$(name:c) [shape = "plaintext", label="$(name)"];
endfunction


function dot_mlabel_beg(name, fgcolor, bgcolor)
  label = "<<table border=\"1\" cellborder=\"0\" cellspacing=\"4\" cellpadding=\"3\" bgcolor=\"white\">\n"
  label = label + "<tr><td style=\"ROUNDED\" border=\"1\" bgcolor=\"$(my.bgcolor)\" colspan=\"2\"><font color=\"$(my.fgcolor)\">$(name:)</font></td></tr>\n"
  return label
endfunction
function dot_mlabel_end
  return "</table>>\n"
endfunction

function dot_message_label(name)
  label=""
  for global.codec.message as msg where msg.name = my.name
    for msg.field
      label = label + "<tr><td align=\"right\" bgcolor=\"gray\">$(name)</td><td align=\"left\" bgcolor=\"gray\">[$(type)"
      if defined(size)
        label = label + "*$(size:)"
      endif
      label = label + "]<br/></td></tr>\n"
    endfor
  endfor
  return label
endfunction

function dot_event_label(event)
  label=""
  for event.action
    if defined(action.message) & action.name = "send"
      m_name = "($(action.message:c))"
      p_name = "$(action.message:c)"
      label = label + "<tr><td colspan=\"2\" align=\"center\" port=\"$(p_name)\">send $(m_name:UPPER)</td></tr>\n"
    else
      label = label + "<tr><td colspan=\"2\" align=\"center\">$(action.name)</td></tr>\n"
    endif
  endfor  
  return label
endfunction

function dot_method_label(meth)
  label=""
  for my.meth.field
    label = label + "<tr><td align=\"right\" bgcolor=\"gray\">$(name)</td><td align=\"left\" bgcolor=\"gray\">[$(type)"
    if defined(size)
      label = label + "*$(size:)"
    endif
    label = label + "]</td></tr>\n"
  endfor
  for my.meth.accept
    xxx="$(accept.reply:UPPER)"
    label = label + "<tr><td colspan=\"2\" align=\"center\" bgcolor=\"gray\">"
    label = label + "$(reply:UPPER)"
    label = label + "</td></tr>"
  endfor
  return label
endfunction

function generate_free_message_node
  #echo "free message: m_$(message.name:c)"
  label = dot_mlabel_beg($(message.name:UPPER), "white", "gray30")
  label = label + dot_message_label(message.name)
  label = label + dot_mlabel_end()
  > m_$(message.name:c) [shape = "plaintext" style = "solid" label = $(label:)];
endfunction

function generate_external_message_node
  #echo "external event: m_$(event.name:c)"
  label = dot_mlabel_beg(event.name, "white", "gray30")
  label = label + dot_message_label(event.name)
  label = label + dot_event_label(event)
  label = label + dot_mlabel_end()
  > m_$(state.name:c)_$(event.name:c) [shape = "plaintext" style = "solid" label = $(label:)];
endfunction    

function generate_internal_message_node
  #echo "internal event: m_$(event.name:c)"
  label = dot_mlabel_beg(event.name, "black", "gray90")
  label = label + dot_event_label(event)
  label = label + dot_mlabel_end()
  > m_$(state.name:c)_$(event.name:c) [shape = "plaintext" style = "solid" label = $(label:)];
endfunction    

function generate_method
  #echo "method $(method.name:c)"
  label = dot_mlabel_beg(method.name, "blue", "gray90")
  label = label + dot_method_label(method)
  label = label + dot_mlabel_end()
  > f_$(name:c) [shape="plaintext" color="blue" label = $(label:)];
endfunction


function generate_state_event_edge
  > s_$(state.name:c) -> m_$(state.name:c)_$(event.name:c) [style="solid"];

  if defined (event.next)
    > s_$(event.next:c) -> m_$(state.name:c)_$(event.name:c) [dir="back", style="solid"];
  else
  > s_$(state.name:c) -> m_$(state.name:c)_$(event.name:c) [dir="back", style="solid"];
  endif
endfunction

function generate_state_event_action_edge
  if defined(action.message) & action.name = "send"
    #echo "event action edge: m_$(action.message:c)"
    > m_$(state.name:c)_$(event.name:c):$(action.message:c) -> m_$(action.message:c) [style = "dotted", arrowhead="ovee"];
  endif
endfunction


function generate_dot_one (thing)
  output "$(class.name:c)_$(my.thing.name:c).dot"
  >digraph $(class.name:c) {
  >  label="$(my.thing.name) and $(global.codec.name)";
  >  labelloc="top";
  # nodes                          

  for my.thing.state as state
    dot_state(state)
  endfor

  for my.thing.state as state
    for state.event as event
      if count(my.thing.event, name = -1.name) = 0
        copy event to my.thing
        #echo "stash $(event.name)"
      endif
      if count(global.codec.message, name = event.name)
        generate_external_message_node()
      else
        generate_internal_message_node()
      endif
    endfor
  endfor

  for global.codec.message
    nseen = count(my.thing.event, event.name = -1.name)
    #echo "have $(nseen) $(name)"
    if nseen = 0
      generate_free_message_node()
    endif
  endfor

  for my.thing.method as method
    generate_method()
  endfor

  # edges
  
  for my.thing.state as state
    dot_state_inheritance(state)
  endfor

  for my.thing.state as state
    for state.event as event 
      generate_state_event_edge()
      for event.action as action
        generate_state_event_action_edge()
      endfor
    endfor
  endfor

  for my.thing.method as method
    #echo "method $(method.name)"
    for my.thing.state as state
      #echo "  state $(state.name)"
      for state.event as event
        #echo "    event $(event.name)"
        if method.name = event.name
          >  m_$(state.name:c)_$(event.name:c) -> f_$(method.name:c) [dir="back", color="blue"];
        endif
      endfor
    endfor
  endfor


  >}
endfunction

function generate_dot
  generate_dot_one(global.server)
  generate_dot_one(global.client)
endfunction


generate_dot()
.endtemplate
