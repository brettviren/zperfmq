################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
# Python cffi compatible file slurp

zperfmq_cdefs = list ()
# Custom setup for zperfmq

zperfmq_cdefs.append ('''
typedef struct _zperf_node_t zperf_node_t;
typedef struct _zperf_t zperf_t;
// CLASS: zperf_node
// Create a new zperf_node.
zperf_node_t *
    zperf_node_new (const char *nickname);

// Destroy the zperf_node.
void
    zperf_node_destroy (zperf_node_t **self_p);

// Create a server in the node.
void
    zperf_node_server (zperf_node_t *self, const char *nickname);

// Self test of this class.
void
    zperf_node_test (bool verbose);

// CLASS: zperf
// Create a new zperf using the given socket type.
zperf_t *
    zperf_new (int socket_type);

// Destroy the zperf.
void
    zperf_destroy (zperf_t **self_p);

// Bind the zperf measurement socket to an address.
// Return the qualified address or NULL on error.
const char *
    zperf_bind (zperf_t *self, const char *address);

// Connect the zperf measurement socket to a fully qualified address.
// Return code is zero on success.
int
    zperf_connect (zperf_t *self, const char *address);

// Perform a measurement atomically.  This is simply the combination
// of initialize() and finalize().
uint64_t
    zperf_measure (zperf_t *self, const char *name, int nmsgs, uint64_t msgsize);

// Initiate a measurement.
void
    zperf_initiate (zperf_t *self, const char *name, int nmsgs, uint64_t msgsize);

// Wait for the previously initiated a measurement.
uint64_t
    zperf_finalize (zperf_t *self);

// Return the name of the last measurement.
const char *
    zperf_name (zperf_t *self);

// The requested number of message for last measurement.
int
    zperf_nmsgs (zperf_t *self);

// The requested size of message for last measurement.
uint64_t
    zperf_msgsize (zperf_t *self);

// Return the number of messages that were received out of sync
// during the previous yodel or recv measurements.  The measurement
// must be finalized.
int
    zperf_noos (zperf_t *self);

// Return the number of bytes transferred by the previous
// measurement.  The measurement must be finalized.
uint64_t
    zperf_bytes (zperf_t *self);

// Return the CPU time (user+system) in microseconds used by the last
// measurement.  The measurement must be finalized.
uint64_t
    zperf_cpu (zperf_t *self);

// Return the elapsed time in microseconds used by the last
// measurement.  The measurement must be finalized.
uint64_t
    zperf_time (zperf_t *self);

// Self test of this class.
void
    zperf_test (bool verbose);

''')
