################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8.12)
project(zperfmq)
enable_language(CXX)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
# Select flags
SET(CMAKE_C_FLAGS_RELEASE "-O3")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/builds/cmake/Modules)

# Will be used to add flags to pkg-config useful when apps want to statically link
set(pkg_config_libs_private "")
set(pkg_config_names_private "")

########################################################################
# options
########################################################################
OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" ON)
IF (ENABLE_DRAFTS)
    ADD_DEFINITIONS (-DZPERFMQ_BUILD_DRAFT_API)
ENDIF (ENABLE_DRAFTS)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(REMOVE "${SOURCE_DIR}/src/platform.h")

file(WRITE "${CMAKE_BINARY_DIR}/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${CMAKE_BINARY_DIR}/platform.h.in" "${CMAKE_BINARY_DIR}/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.cpp")
    set_source_files_properties(
        ${sources}
        PROPERTIES LANGUAGE CXX
    )
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# specific case of windows UWP
if( "${CMAKE_SYSTEM_NAME}" STREQUAL "WindowsStore" AND "${CMAKE_SYSTEM_VERSION}" STREQUAL "10.0")
  ADD_DEFINITIONS(-DZMQ_HAVE_WINDOWS_UWP)
  ADD_DEFINITIONS(-D_WIN32_WINNT=_WIN32_WINNT_WIN10)
endif()


# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)
set(OPTIONAL_LIBRARIES_STATIC)

########################################################################
# ZYRE dependency
########################################################################
find_package(zyre REQUIRED)
IF (ZYRE_FOUND)
    include_directories(${ZYRE_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${ZYRE_LIBRARIES})
  IF (PC_ZYRE_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libzyre")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_ZYRE_STATIC_LDFLAGS})
  ELSE (PC_ZYRE_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lzyre")
  ENDIF (PC_ZYRE_FOUND)
ELSE (ZYRE_FOUND)
    message( FATAL_ERROR "zyre not found." )
ENDIF (ZYRE_FOUND)

########################################################################
# LIBZMQ dependency
########################################################################
find_package(libzmq REQUIRED)
IF (LIBZMQ_FOUND)
    include_directories(${LIBZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${LIBZMQ_LIBRARIES})
  IF (PC_LIBZMQ_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libzmq")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_LIBZMQ_STATIC_LDFLAGS})
  ELSE (PC_LIBZMQ_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lzmq")
  ENDIF (PC_LIBZMQ_FOUND)
ELSE (LIBZMQ_FOUND)
    message( FATAL_ERROR "libzmq not found." )
ENDIF (LIBZMQ_FOUND)

########################################################################
# CZMQ dependency
########################################################################
find_package(czmq REQUIRED)
IF (CZMQ_FOUND)
    include_directories(${CZMQ_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${CZMQ_LIBRARIES})
  IF (PC_CZMQ_FOUND)
      set(pkg_config_names_private "${pkg_config_names_private} libczmq")
      list(APPEND OPTIONAL_LIBRARIES_STATIC ${PC_CZMQ_STATIC_LDFLAGS})
  ELSE (PC_CZMQ_FOUND)
      set(pkg_config_libs_private "${pkg_config_libs_private} -lczmq")
  ENDIF (PC_CZMQ_FOUND)
ELSE (CZMQ_FOUND)
    message( FATAL_ERROR "czmq not found." )
ENDIF (CZMQ_FOUND)

########################################################################
# version
########################################################################
set(ZPERFMQ_VERSION_MAJOR 0)
set(ZPERFMQ_VERSION_MINOR 0)
set(ZPERFMQ_VERSION_PATCH 0)
set(ZPERFMQ_VERSION "${ZPERFMQ_VERSION_MAJOR}.${ZPERFMQ_VERSION_MINOR}.${ZPERFMQ_VERSION_PATCH}")
message(STATUS "Detected ZPERFMQ Version - ${ZPERFMQ_VERSION}")


########################################################################
# includes
########################################################################
set (zperfmq_headers
    include/zperfmq_library.hpp
    include/zperfmq.hpp
    src/zperf_server_engine.inc
    src/zperf_client_engine.inc
)

IF (ENABLE_DRAFTS)
    list(APPEND zperfmq_headers
        include/zperf.hpp
        include/zperf_node.hpp
        include/zperf_msg.hpp
        include/zperf_server.hpp
        include/zperf_client.hpp
        include/perf.hpp
    )
ENDIF (ENABLE_DRAFTS)

source_group ("Header Files" FILES ${zperfmq_headers})
install(FILES ${zperfmq_headers} DESTINATION include)

########################################################################
# library
########################################################################


include_directories("${SOURCE_DIR}/src" "${SOURCE_DIR}/include" "${CMAKE_BINARY_DIR}")
set (zperfmq_sources
)

IF (ENABLE_DRAFTS)
    list (APPEND zperfmq_sources
        src/zperf.cpp
        src/zperf_node.cpp
        src/zperf_msg.cpp
        src/zperf_server.cpp
        src/zperf_client.cpp
        src/perf.cpp
    )
ENDIF (ENABLE_DRAFTS)

IF (ENABLE_DRAFTS)
    list (APPEND zperfmq_sources
        src/zperfmq_private_selftest.cpp
    )
ENDIF (ENABLE_DRAFTS)

source_group("Source Files" FILES ${zperfmq_sources})


option(ZPERFMQ_BUILD_SHARED "Whether or not to build the shared object" ON)
option(ZPERFMQ_BUILD_STATIC "Whether or not to build the static archive" ON)

if (NOT ZPERFMQ_BUILD_SHARED AND NOT ZPERFMQ_BUILD_STATIC)
  message(FATAL_ERROR "Neither static nor shared library build enabled")
endif()

IF (NOT MSVC)
  # avoid building everything twice for shared + static
  # only on *nix, as Windows needs different preprocessor defines in static builds
  add_library (zperfmq_objects OBJECT ${zperfmq_sources})
  set_property(TARGET zperfmq_objects PROPERTY POSITION_INDEPENDENT_CODE ON)
ENDIF (NOT MSVC)

# shared
if (ZPERFMQ_BUILD_SHARED)
  IF (MSVC)
    add_library(zperfmq SHARED ${zperfmq_sources})
  ELSE (MSVC)
    add_library(zperfmq SHARED $<TARGET_OBJECTS:zperfmq_objects>)
  ENDIF (MSVC)

  set_target_properties (zperfmq PROPERTIES
    PUBLIC_HEADER "${public_headers}"
    DEFINE_SYMBOL "ZPERFMQ_EXPORTS"
    SOVERSION "0"
    VERSION "${ZPERFMQ_VERSION}"
    COMPILE_DEFINITIONS "DLL_EXPORT"
    OUTPUT_NAME "zperfmq"
    PREFIX "lib"
  )

  target_link_libraries(zperfmq
    PUBLIC ${MORE_LIBRARIES}
  )

  install(TARGETS zperfmq
    EXPORT zperfmq-targets
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin                # .dll file
  )

  target_include_directories(zperfmq
    PUBLIC
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
      $<INSTALL_INTERFACE:include>
  )
endif()

# static
if (ZPERFMQ_BUILD_STATIC)
  IF (MSVC)
    add_library(zperfmq-static STATIC ${zperfmq_sources})
  ELSE (MSVC)
    add_library(zperfmq-static STATIC $<TARGET_OBJECTS:zperfmq_objects>)
  ENDIF (MSVC)

  set_target_properties(zperfmq-static PROPERTIES
    PUBLIC_HEADER "${public_headers}"
    COMPILE_DEFINITIONS "ZPERFMQ_STATIC"
    OUTPUT_NAME "zperfmq"
    PREFIX "lib"
  )

  target_link_libraries(zperfmq-static
    PUBLIC ${MORE_LIBRARIES}
  )

  install(TARGETS zperfmq-static
    EXPORT zperfmq-targets
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin                # .dll file
  )

  target_include_directories(zperfmq-static
    PUBLIC
      $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
      $<INSTALL_INTERFACE:include>
  )
  target_compile_definitions(zperfmq-static
    PUBLIC ZPERFMQ_STATIC
  )

endif()



########################################################################
# pkgconfig
########################################################################
set (VERSION "0.0.0")
set (prefix "${CMAKE_INSTALL_PREFIX}")
set (exec_prefix "\${prefix}")
set (libdir "\${prefix}/lib${LIB_SUFFIX}")
set (includedir "\${prefix}/include")
IF (ENABLE_DRAFTS)
    set (pkg_config_defines "-DZPERFMQ_BUILD_DRAFT_API=1")
ELSE (ENABLE_DRAFTS)
    set (pkg_config_defines "")
ENDIF (ENABLE_DRAFTS)
configure_file(
    "${SOURCE_DIR}/src/libzperfmq.pc.in"
    "${SOURCE_DIR}/src/libzperfmq.pc"
@ONLY)

install(
    FILES "${SOURCE_DIR}/src/libzperfmq.pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

########################################################################
# installer
########################################################################
include(CMakePackageConfigHelpers)
if (WIN32)
  set(CMAKECONFIG_INSTALL_DIR "CMake" CACHE STRING "install path for zperfmqConfig.cmake")
else()
  # GNUInstallDirs "DATADIR" wrong here; CMake search path wants "share".
  set(CMAKECONFIG_INSTALL_DIR "share/cmake/zperfmq" CACHE STRING "install path for zperfmqConfig.cmake")
endif()

if (NOT CMAKE_VERSION VERSION_LESS 3.0)
  export(EXPORT zperfmq-targets
         FILE "${CMAKE_CURRENT_BINARY_DIR}/zperfmqTargets.cmake")
endif()
configure_package_config_file(builds/cmake/Config.cmake.in
                              "${CMAKE_CURRENT_BINARY_DIR}/zperfmqConfig.cmake"
                              INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR})
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/zperfmqConfigVersion.cmake
                                 VERSION ${ZPERFMQ_VERSION}
                                 COMPATIBILITY AnyNewerVersion)
install(EXPORT zperfmq-targets
        FILE zperfmqTargets.cmake
        DESTINATION ${CMAKECONFIG_INSTALL_DIR})
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/zperfmqConfig.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/zperfmqConfigVersion.cmake
              DESTINATION ${CMAKECONFIG_INSTALL_DIR})

########################################################################
# executables
########################################################################
add_executable(
    zperfcli
    "${SOURCE_DIR}/src/zperfcli.cpp"
)
if (TARGET zperfmq)
target_link_libraries(
    zperfcli
    zperfmq
    ${ZYRE_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
endif()
if (NOT TARGET zperfmq AND TARGET zperfmq-static)
target_link_libraries(
    zperfcli
    zperfmq-static
    ${ZYRE_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
    ${OPTIONAL_LIBRARIES_STATIC}
)
endif()
install(TARGETS zperfcli
    RUNTIME DESTINATION bin
)
add_executable(
    zperfmq_selftest
    "${SOURCE_DIR}/src/zperfmq_selftest.cpp"
)
if (TARGET zperfmq)
target_link_libraries(
    zperfmq_selftest
    zperfmq
    ${ZYRE_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
)
endif()
if (NOT TARGET zperfmq AND TARGET zperfmq-static)
target_link_libraries(
    zperfmq_selftest
    zperfmq-static
    ${ZYRE_LIBRARIES}
    ${LIBZMQ_LIBRARIES}
    ${CZMQ_LIBRARIES}
    ${OPTIONAL_LIBRARIES}
    ${OPTIONAL_LIBRARIES_STATIC}
)
endif()

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 60 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 600 CACHE STRING "Timout of the total testsuite")

if(UNIX)
    find_program(MEMORYCHECK_COMMAND valgrind)
    set(MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --show-reachable=yes
                                     --error-exitcode=1
                                     --suppressions=src/.valgrind.supp")
endif()

set(TEST_CLASSES
)

IF (ENABLE_DRAFTS)
    list (APPEND TEST_CLASSES
    zperf
    zperf_node
    zperf_msg
    zperf_server
    zperf_client
    perf
    )
ENDIF (ENABLE_DRAFTS)

IF (ENABLE_DRAFTS)
    list (APPEND TEST_CLASSES
    private_classes
    )
ENDIF (ENABLE_DRAFTS)


add_custom_target(
    copy-selftest-ro ALL
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/src/selftest-ro ${CMAKE_BINARY_DIR}/src/selftest-ro
)

add_custom_target(
    make-selftest-rw ALL
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/src/selftest-rw
)

set_directory_properties(
    PROPERTIES
    ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_BINARY_DIR}/src/selftest-ro;${CMAKE_BINARY_DIR}/src/selftest-rw"
)

foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND zperfmq_selftest --continue --verbose --test ${TEST_CLASS}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES DEPENDS "copy-selftest-ro;make-selftest-rw"
    )
endforeach(TEST_CLASS)

include(CTest)

########################################################################
# cleanup
########################################################################
add_custom_target (distclean @echo Cleaning for source distribution)

set(cmake_generated ${CMAKE_BINARY_DIR}/CMakeCache.txt
                    ${CMAKE_BINARY_DIR}/cmake_install.cmake
                    ${CMAKE_BINARY_DIR}/Makefile
                    ${CMAKE_BINARY_DIR}/CMakeFiles
                    ${CMAKE_BINARY_DIR}/CTestTestfile.cmake
                    ${CMAKE_BINARY_DIR}/DartConfiguration.tcl
                    ${CMAKE_BINARY_DIR}/Testing
                    ${CMAKE_BINARY_DIR}/compile_commands.json
                    ${CMAKE_BINARY_DIR}/platform.h
                    ${CMAKE_BINARY_DIR}/src/libzperfmq.pc
                    ${CMAKE_BINARY_DIR}/src/libzperfmq.so
                    ${CMAKE_BINARY_DIR}/src/zperfmq_selftest
                    ${CMAKE_BINARY_DIR}/src/zperfcli
                    ${CMAKE_BINARY_DIR}/src/zperfmq_selftest
)

add_custom_command(
    DEPENDS clean
    COMMENT "distribution clean"
    COMMAND rm
    ARGS    -rf CMakeTmp ${cmake_generated}
    TARGET  distclean
)

include(ClangFormat OPTIONAL)

########################################################################
# summary
########################################################################
message ("")
message (STATUS "******************* Configuration Summary *******************")
message (STATUS "General:")
message (STATUS "  Version           :   ${VERSION}")
message (STATUS "  System            :   ${CMAKE_SYSTEM_NAME}")
message (STATUS "  C compiler        :   ${CMAKE_C_COMPILER}")
message (STATUS "  Debug C flags     :   ${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS}")
message (STATUS "  Release C flags   :   ${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS}")
message (STATUS "  Build type        :   ${CMAKE_BUILD_TYPE}")
message (STATUS "  Static build      :   ${ZPERFMQ_BUILD_STATIC}")
message (STATUS "  Shared build      :   ${ZPERFMQ_BUILD_SHARED}")
IF (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   Yes")
ELSE (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   No")
ENDIF (ENABLE_DRAFTS)
message (STATUS "")
message (STATUS "Dependencies:")
include(FeatureSummary)
feature_summary (WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
message (STATUS "")
message (STATUS "Install:")
message (STATUS "  Install prefix    :" "${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "************************* Options ***************************")
message (STATUS "Options:")
message (STATUS "  Use the Draft API (default = yes):")
message (STATUS "  -DENABLE-DRAFTS=[yes|no]")
message (STATUS "")
message (STATUS "*************************************************************")
message (STATUS "Configuration complete! Now procced with:")
message (STATUS "  'make'                compile the project")
message (STATUS "  'make test'           run the project's selftest")
message (STATUS "  'make install'        install the project to ${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "Further options are:")
message (STATUS "  'ctest -T memcheck'   run the project's selftest with")
message (STATUS "                        valgrind to check for memory leaks")
message (STATUS "")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
